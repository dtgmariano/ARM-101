   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"pwm.c"
  21              	.Ltext0:
  22              		.file 1 "../Modules/pwm.c"
 1796              		.align	2
 1797              		.global	PWMInit
 1799              	PWMInit:
 1800              	.LFB0:
   1:../Modules/pwm.c **** /*------------------------------------------------------------------------------------*/
   2:../Modules/pwm.c **** /*                                       HEADER                                       */
   3:../Modules/pwm.c **** /*------------------------------------------------------------------------------------*/
   4:../Modules/pwm.c **** 
   5:../Modules/pwm.c **** /***************************************************************************************
   6:../Modules/pwm.c ****  *Project Name: MA2000 Firmware
   7:../Modules/pwm.c ****  *	   Version: 0.24
   8:../Modules/pwm.c ****  *   File Name: pwm.c
   9:../Modules/pwm.c ****  *  Created on: 19/03/2013
  10:../Modules/pwm.c ****  *      Author: Daniel Teodoro G. Mariano
  11:../Modules/pwm.c ****  *       Email: dtgm@uol.com.br
  12:../Modules/pwm.c ****  * Description: Sets PWM Module for LPC2148, based on the MA2000 Robot Project
  13:../Modules/pwm.c **** ***************************************************************************************/
  14:../Modules/pwm.c **** 
  15:../Modules/pwm.c **** #include "LPC214x.h"
  16:../Modules/pwm.c **** #include "pwm.h"
  17:../Modules/pwm.c **** 
  18:../Modules/pwm.c **** #define PWMFREQUENCY 2500
  19:../Modules/pwm.c **** #define CALCPWM (60000000/PWMFREQUENCY)
  20:../Modules/pwm.c **** 
  21:../Modules/pwm.c **** void PWMInit()
  22:../Modules/pwm.c **** {
 1801              		.loc 1 22 0
 1802              		.cfi_startproc
 1803              		@ Function supports interworking.
 1804              		@ args = 0, pretend = 0, frame = 0
 1805              		@ frame_needed = 1, uses_anonymous_args = 0
 1806              		@ link register save eliminated.
 1807 0000 04B02DE5 		str	fp, [sp, #-4]!
 1808              	.LCFI0:
 1809              		.cfi_def_cfa_offset 4
 1810 0004 00B08DE2 		add	fp, sp, #0
 1811              		.cfi_offset 11, -4
 1812              	.LCFI1:
 1813              		.cfi_def_cfa_register 11
  23:../Modules/pwm.c **** 	//Setting PWM2 function: Sets P0.7 with value 10 for Bits 15 and 14 (PINSEL0)
  24:../Modules/pwm.c **** 	//P0.7 -> EXT1-8 -> Pin 20
  25:../Modules/pwm.c **** 	PINSEL0 &= ~(3 << 14);
 1814              		.loc 1 25 0
 1815 0008 0E32A0E3 		mov	r3, #-536870912
 1816 000c 0B3983E2 		add	r3, r3, #180224
 1817 0010 0E22A0E3 		mov	r2, #-536870912
 1818 0014 0B2982E2 		add	r2, r2, #180224
 1819 0018 002092E5 		ldr	r2, [r2, #0]
 1820 001c 0329C2E3 		bic	r2, r2, #49152
 1821 0020 002083E5 		str	r2, [r3, #0]
  26:../Modules/pwm.c **** 	PINSEL0 |= (1 << 15);
 1822              		.loc 1 26 0
 1823 0024 0E32A0E3 		mov	r3, #-536870912
 1824 0028 0B3983E2 		add	r3, r3, #180224
 1825 002c 0E22A0E3 		mov	r2, #-536870912
 1826 0030 0B2982E2 		add	r2, r2, #180224
 1827 0034 002092E5 		ldr	r2, [r2, #0]
 1828 0038 022982E3 		orr	r2, r2, #32768
 1829 003c 002083E5 		str	r2, [r3, #0]
  27:../Modules/pwm.c **** 
  28:../Modules/pwm.c **** 	//Setting PWM4 function: Sets P0.8 with value 10 for Bits 17 and 16 (PINSEL0)
  29:../Modules/pwm.c **** 	//P0.8 -> EXT1-9 -> Pin 17
  30:../Modules/pwm.c **** 	PINSEL0 &= ~(3 << 16);
 1830              		.loc 1 30 0
 1831 0040 0E32A0E3 		mov	r3, #-536870912
 1832 0044 0B3983E2 		add	r3, r3, #180224
 1833 0048 0E22A0E3 		mov	r2, #-536870912
 1834 004c 0B2982E2 		add	r2, r2, #180224
 1835 0050 002092E5 		ldr	r2, [r2, #0]
 1836 0054 0328C2E3 		bic	r2, r2, #196608
 1837 0058 002083E5 		str	r2, [r3, #0]
  31:../Modules/pwm.c **** 	PINSEL0 |= (1 << 17);
 1838              		.loc 1 31 0
 1839 005c 0E32A0E3 		mov	r3, #-536870912
 1840 0060 0B3983E2 		add	r3, r3, #180224
 1841 0064 0E22A0E3 		mov	r2, #-536870912
 1842 0068 0B2982E2 		add	r2, r2, #180224
 1843 006c 002092E5 		ldr	r2, [r2, #0]
 1844 0070 022882E3 		orr	r2, r2, #131072
 1845 0074 002083E5 		str	r2, [r3, #0]
  32:../Modules/pwm.c **** 
  33:../Modules/pwm.c **** 	//Setting PWM5 function: Sets P0.21 with value 01 for Bits 11 and 10 (PINSEL1)
  34:../Modules/pwm.c **** 	//P0.21 -> EXT1-22 -> Pin 6
  35:../Modules/pwm.c **** 	PINSEL1 &= ~(3 << 11);
 1846              		.loc 1 35 0
 1847 0078 4E32A0E3 		mov	r3, #-536870908
 1848 007c 0B3983E2 		add	r3, r3, #180224
 1849 0080 4E22A0E3 		mov	r2, #-536870908
 1850 0084 0B2982E2 		add	r2, r2, #180224
 1851 0088 002092E5 		ldr	r2, [r2, #0]
 1852 008c 062BC2E3 		bic	r2, r2, #6144
 1853 0090 002083E5 		str	r2, [r3, #0]
  36:../Modules/pwm.c **** 	PINSEL1 |= (1 << 10);
 1854              		.loc 1 36 0
 1855 0094 4E32A0E3 		mov	r3, #-536870908
 1856 0098 0B3983E2 		add	r3, r3, #180224
 1857 009c 4E22A0E3 		mov	r2, #-536870908
 1858 00a0 0B2982E2 		add	r2, r2, #180224
 1859 00a4 002092E5 		ldr	r2, [r2, #0]
 1860 00a8 012B82E3 		orr	r2, r2, #1024
 1861 00ac 002083E5 		str	r2, [r3, #0]
  37:../Modules/pwm.c **** 
  38:../Modules/pwm.c **** 	//PWM Timer Control Register. The PWMTCR is used to control the Timer
  39:../Modules/pwm.c **** 	//Counter functions. The Timer Counter can be disabled or reset through
  40:../Modules/pwm.c **** 	//the PWMTCR.
  41:../Modules/pwm.c **** 	PWMTCR = 0x02; // reset PWM
 1862              		.loc 1 41 0
 1863 00b0 4E32A0E3 		mov	r3, #-536870908
 1864 00b4 053983E2 		add	r3, r3, #81920
 1865 00b8 0220A0E3 		mov	r2, #2
 1866 00bc 002083E5 		str	r2, [r3, #0]
  42:../Modules/pwm.c **** 
  43:../Modules/pwm.c **** 	//PWMMR0 = 60000000/PWMFREQUENCY;
  44:../Modules/pwm.c **** 	PWMMR0 = CALCPWM;
 1867              		.loc 1 44 0
 1868 00c0 0E32A0E3 		mov	r3, #-536870912
 1869 00c4 053983E2 		add	r3, r3, #81920
 1870 00c8 183083E2 		add	r3, r3, #24
 1871 00cc 5D2CA0E3 		mov	r2, #23808
 1872 00d0 C02082E2 		add	r2, r2, #192
 1873 00d4 002083E5 		str	r2, [r3, #0]
  45:../Modules/pwm.c **** 
  46:../Modules/pwm.c **** 	//PWM Prescale Register. The PWMTC is incremented every PWMPR+1
  47:../Modules/pwm.c **** 	//cycles of PCLK.
  48:../Modules/pwm.c **** 	PWMPR = 0; // Prescale unable
 1874              		.loc 1 48 0
 1875 00d8 CE32A0E3 		mov	r3, #-536870900
 1876 00dc 053983E2 		add	r3, r3, #81920
 1877 00e0 0020A0E3 		mov	r2, #0
 1878 00e4 002083E5 		str	r2, [r3, #0]
  49:../Modules/pwm.c **** 
  50:../Modules/pwm.c **** 	//PWM Control Register. Enables PWM outputs and selects PWM channel
  51:../Modules/pwm.c **** 	//types as either single edge or double edge controlled.
  52:../Modules/pwm.c **** 	PWMPCR &= ~((1 << 2) | (1 << 4) | (1 << 5));
 1879              		.loc 1 52 0
 1880 00e8 0E32A0E3 		mov	r3, #-536870912
 1881 00ec 053983E2 		add	r3, r3, #81920
 1882 00f0 4C3083E2 		add	r3, r3, #76
 1883 00f4 0E22A0E3 		mov	r2, #-536870912
 1884 00f8 052982E2 		add	r2, r2, #81920
 1885 00fc 4C2082E2 		add	r2, r2, #76
 1886 0100 002092E5 		ldr	r2, [r2, #0]
 1887 0104 3420C2E3 		bic	r2, r2, #52
 1888 0108 002083E5 		str	r2, [r3, #0]
  53:../Modules/pwm.c **** 	PWMPCR |= ((1 << 13) | (1 << 12) | (1 << 10)); // Sets PWM 2,4,5 as single edge output
 1889              		.loc 1 53 0
 1890 010c 0E32A0E3 		mov	r3, #-536870912
 1891 0110 053983E2 		add	r3, r3, #81920
 1892 0114 4C3083E2 		add	r3, r3, #76
 1893 0118 0E22A0E3 		mov	r2, #-536870912
 1894 011c 052982E2 		add	r2, r2, #81920
 1895 0120 4C2082E2 		add	r2, r2, #76
 1896 0124 002092E5 		ldr	r2, [r2, #0]
 1897 0128 0D2B82E3 		orr	r2, r2, #13312
 1898 012c 002083E5 		str	r2, [r3, #0]
  54:../Modules/pwm.c **** 	//PWMPCR = 0x0000200; 	// ativa PWM1 como saída para PWM de borda simples
  55:../Modules/pwm.c **** 
  56:../Modules/pwm.c **** 	//PWM Timer Control Register. The PWMTCR is used to control the Timer
  57:../Modules/pwm.c **** 	//Counter functions. The Timer Counter can be disabled or reset through
  58:../Modules/pwm.c **** 	//the PWMTCR.
  59:../Modules/pwm.c **** 	PWMTCR = 00001001; // Counter and PWM enabled
 1899              		.loc 1 59 0
 1900 0130 4E32A0E3 		mov	r3, #-536870908
 1901 0134 053983E2 		add	r3, r3, #81920
 1902 0138 022CA0E3 		mov	r2, #512
 1903 013c 012082E2 		add	r2, r2, #1
 1904 0140 002083E5 		str	r2, [r3, #0]
  60:../Modules/pwm.c **** 
  61:../Modules/pwm.c **** 	//The PWM Match Control Register is used to control what operations are performed when
  62:../Modules/pwm.c **** 	//one of the PWM Match Registers matches the PWM Timer Counter.
  63:../Modules/pwm.c **** 	PWMMCR = 0x0000003;
 1905              		.loc 1 63 0
 1906 0144 0E32A0E3 		mov	r3, #-536870912
 1907 0148 053983E2 		add	r3, r3, #81920
 1908 014c 143083E2 		add	r3, r3, #20
 1909 0150 0320A0E3 		mov	r2, #3
 1910 0154 002083E5 		str	r2, [r3, #0]
  64:../Modules/pwm.c **** 
  65:../Modules/pwm.c **** 	//setDutyCycle(2, 1000);
  66:../Modules/pwm.c **** 	//setDutyCycle(4, 75);
  67:../Modules/pwm.c **** 	//setDutyCycle(5, 75);
  68:../Modules/pwm.c **** 
  69:../Modules/pwm.c **** 	PWMMCR = 0x0000003;  // reset on Match 0
 1911              		.loc 1 69 0
 1912 0158 0E32A0E3 		mov	r3, #-536870912
 1913 015c 053983E2 		add	r3, r3, #81920
 1914 0160 143083E2 		add	r3, r3, #20
 1915 0164 0320A0E3 		mov	r2, #3
 1916 0168 002083E5 		str	r2, [r3, #0]
  70:../Modules/pwm.c **** }
 1917              		.loc 1 70 0
 1918 016c 00D08BE2 		add	sp, fp, #0
 1919 0170 0008BDE8 		ldmfd	sp!, {fp}
 1920 0174 1EFF2FE1 		bx	lr
 1921              		.cfi_endproc
 1922              	.LFE0:
 1924              		.align	2
 1925              		.global	setDutyCycle
 1927              	setDutyCycle:
 1928              	.LFB1:
  71:../Modules/pwm.c **** 
  72:../Modules/pwm.c **** void setDutyCycle(unsigned int pwmchannel, unsigned int dutyccycle){
 1929              		.loc 1 72 0
 1930              		.cfi_startproc
 1931              		@ Function supports interworking.
 1932              		@ args = 0, pretend = 0, frame = 8
 1933              		@ frame_needed = 1, uses_anonymous_args = 0
 1934              		@ link register save eliminated.
 1935 0178 04B02DE5 		str	fp, [sp, #-4]!
 1936              	.LCFI2:
 1937              		.cfi_def_cfa_offset 4
 1938 017c 00B08DE2 		add	fp, sp, #0
 1939              		.cfi_offset 11, -4
 1940              	.LCFI3:
 1941              		.cfi_def_cfa_register 11
 1942 0180 0CD04DE2 		sub	sp, sp, #12
 1943 0184 08000BE5 		str	r0, [fp, #-8]
 1944 0188 0C100BE5 		str	r1, [fp, #-12]
  73:../Modules/pwm.c **** 	if(pwmchannel == 1){PWMMR1 = (dutyccycle  * CALCPWM)/1023;}
 1945              		.loc 1 73 0
 1946 018c 08301BE5 		ldr	r3, [fp, #-8]
 1947 0190 010053E3 		cmp	r3, #1
 1948 0194 1600001A 		bne	.L3
 1949              		.loc 1 73 0 is_stmt 0 discriminator 1
 1950 0198 0E22A0E3 		mov	r2, #-536870912
 1951 019c 052982E2 		add	r2, r2, #81920
 1952 01a0 1C2082E2 		add	r2, r2, #28
 1953 01a4 0C101BE5 		ldr	r1, [fp, #-12]
 1954 01a8 0130A0E1 		mov	r3, r1
 1955 01ac 0331A0E1 		mov	r3, r3, asl #2
 1956 01b0 013083E0 		add	r3, r3, r1
 1957 01b4 0311A0E1 		mov	r1, r3, asl #2
 1958 01b8 013083E0 		add	r3, r3, r1
 1959 01bc 0312A0E1 		mov	r1, r3, asl #4
 1960 01c0 011063E0 		rsb	r1, r3, r1
 1961 01c4 0133A0E1 		mov	r3, r1, asl #6
 1962 01c8 0310A0E1 		mov	r1, r3
 1963 01cc 0135A0E3 		mov	r3, #4194304
 1964 01d0 013A83E2 		add	r3, r3, #4096
 1965 01d4 053083E2 		add	r3, r3, #5
 1966 01d8 910383E0 		umull	r0, r3, r1, r3
 1967 01dc 011063E0 		rsb	r1, r3, r1
 1968 01e0 A110A0E1 		mov	r1, r1, lsr #1
 1969 01e4 013083E0 		add	r3, r3, r1
 1970 01e8 A334A0E1 		mov	r3, r3, lsr #9
 1971 01ec 003082E5 		str	r3, [r2, #0]
 1972 01f0 800000EA 		b	.L2
 1973              	.L3:
  74:../Modules/pwm.c **** 	else if(pwmchannel == 2){PWMMR2 = dutyccycle * CALCPWM/1023;}
 1974              		.loc 1 74 0 is_stmt 1
 1975 01f4 08301BE5 		ldr	r3, [fp, #-8]
 1976 01f8 020053E3 		cmp	r3, #2
 1977 01fc 1600001A 		bne	.L5
 1978              		.loc 1 74 0 is_stmt 0 discriminator 1
 1979 0200 0E22A0E3 		mov	r2, #-536870912
 1980 0204 052982E2 		add	r2, r2, #81920
 1981 0208 202082E2 		add	r2, r2, #32
 1982 020c 0C101BE5 		ldr	r1, [fp, #-12]
 1983 0210 0130A0E1 		mov	r3, r1
 1984 0214 0331A0E1 		mov	r3, r3, asl #2
 1985 0218 013083E0 		add	r3, r3, r1
 1986 021c 0311A0E1 		mov	r1, r3, asl #2
 1987 0220 013083E0 		add	r3, r3, r1
 1988 0224 0312A0E1 		mov	r1, r3, asl #4
 1989 0228 011063E0 		rsb	r1, r3, r1
 1990 022c 0133A0E1 		mov	r3, r1, asl #6
 1991 0230 0310A0E1 		mov	r1, r3
 1992 0234 0135A0E3 		mov	r3, #4194304
 1993 0238 013A83E2 		add	r3, r3, #4096
 1994 023c 053083E2 		add	r3, r3, #5
 1995 0240 910383E0 		umull	r0, r3, r1, r3
 1996 0244 011063E0 		rsb	r1, r3, r1
 1997 0248 A110A0E1 		mov	r1, r1, lsr #1
 1998 024c 013083E0 		add	r3, r3, r1
 1999 0250 A334A0E1 		mov	r3, r3, lsr #9
 2000 0254 003082E5 		str	r3, [r2, #0]
 2001 0258 660000EA 		b	.L2
 2002              	.L5:
  75:../Modules/pwm.c **** 	else if(pwmchannel == 3){PWMMR3 = (dutyccycle  * CALCPWM)/1023;}
 2003              		.loc 1 75 0 is_stmt 1
 2004 025c 08301BE5 		ldr	r3, [fp, #-8]
 2005 0260 030053E3 		cmp	r3, #3
 2006 0264 1600001A 		bne	.L6
 2007              		.loc 1 75 0 is_stmt 0 discriminator 1
 2008 0268 0E22A0E3 		mov	r2, #-536870912
 2009 026c 052982E2 		add	r2, r2, #81920
 2010 0270 242082E2 		add	r2, r2, #36
 2011 0274 0C101BE5 		ldr	r1, [fp, #-12]
 2012 0278 0130A0E1 		mov	r3, r1
 2013 027c 0331A0E1 		mov	r3, r3, asl #2
 2014 0280 013083E0 		add	r3, r3, r1
 2015 0284 0311A0E1 		mov	r1, r3, asl #2
 2016 0288 013083E0 		add	r3, r3, r1
 2017 028c 0312A0E1 		mov	r1, r3, asl #4
 2018 0290 011063E0 		rsb	r1, r3, r1
 2019 0294 0133A0E1 		mov	r3, r1, asl #6
 2020 0298 0310A0E1 		mov	r1, r3
 2021 029c 0135A0E3 		mov	r3, #4194304
 2022 02a0 013A83E2 		add	r3, r3, #4096
 2023 02a4 053083E2 		add	r3, r3, #5
 2024 02a8 910383E0 		umull	r0, r3, r1, r3
 2025 02ac 011063E0 		rsb	r1, r3, r1
 2026 02b0 A110A0E1 		mov	r1, r1, lsr #1
 2027 02b4 013083E0 		add	r3, r3, r1
 2028 02b8 A334A0E1 		mov	r3, r3, lsr #9
 2029 02bc 003082E5 		str	r3, [r2, #0]
 2030 02c0 4C0000EA 		b	.L2
 2031              	.L6:
  76:../Modules/pwm.c **** 	else if(pwmchannel == 4){PWMMR4 = (dutyccycle  * CALCPWM)/1023;}
 2032              		.loc 1 76 0 is_stmt 1
 2033 02c4 08301BE5 		ldr	r3, [fp, #-8]
 2034 02c8 040053E3 		cmp	r3, #4
 2035 02cc 1600001A 		bne	.L7
 2036              		.loc 1 76 0 is_stmt 0 discriminator 1
 2037 02d0 0E22A0E3 		mov	r2, #-536870912
 2038 02d4 052982E2 		add	r2, r2, #81920
 2039 02d8 402082E2 		add	r2, r2, #64
 2040 02dc 0C101BE5 		ldr	r1, [fp, #-12]
 2041 02e0 0130A0E1 		mov	r3, r1
 2042 02e4 0331A0E1 		mov	r3, r3, asl #2
 2043 02e8 013083E0 		add	r3, r3, r1
 2044 02ec 0311A0E1 		mov	r1, r3, asl #2
 2045 02f0 013083E0 		add	r3, r3, r1
 2046 02f4 0312A0E1 		mov	r1, r3, asl #4
 2047 02f8 011063E0 		rsb	r1, r3, r1
 2048 02fc 0133A0E1 		mov	r3, r1, asl #6
 2049 0300 0310A0E1 		mov	r1, r3
 2050 0304 0135A0E3 		mov	r3, #4194304
 2051 0308 013A83E2 		add	r3, r3, #4096
 2052 030c 053083E2 		add	r3, r3, #5
 2053 0310 910383E0 		umull	r0, r3, r1, r3
 2054 0314 011063E0 		rsb	r1, r3, r1
 2055 0318 A110A0E1 		mov	r1, r1, lsr #1
 2056 031c 013083E0 		add	r3, r3, r1
 2057 0320 A334A0E1 		mov	r3, r3, lsr #9
 2058 0324 003082E5 		str	r3, [r2, #0]
 2059 0328 320000EA 		b	.L2
 2060              	.L7:
  77:../Modules/pwm.c **** 	else if(pwmchannel == 5){PWMMR5 = (dutyccycle  * CALCPWM)/1023;}
 2061              		.loc 1 77 0 is_stmt 1
 2062 032c 08301BE5 		ldr	r3, [fp, #-8]
 2063 0330 050053E3 		cmp	r3, #5
 2064 0334 1600001A 		bne	.L8
 2065              		.loc 1 77 0 is_stmt 0 discriminator 1
 2066 0338 0E22A0E3 		mov	r2, #-536870912
 2067 033c 052982E2 		add	r2, r2, #81920
 2068 0340 442082E2 		add	r2, r2, #68
 2069 0344 0C101BE5 		ldr	r1, [fp, #-12]
 2070 0348 0130A0E1 		mov	r3, r1
 2071 034c 0331A0E1 		mov	r3, r3, asl #2
 2072 0350 013083E0 		add	r3, r3, r1
 2073 0354 0311A0E1 		mov	r1, r3, asl #2
 2074 0358 013083E0 		add	r3, r3, r1
 2075 035c 0312A0E1 		mov	r1, r3, asl #4
 2076 0360 011063E0 		rsb	r1, r3, r1
 2077 0364 0133A0E1 		mov	r3, r1, asl #6
 2078 0368 0310A0E1 		mov	r1, r3
 2079 036c 0135A0E3 		mov	r3, #4194304
 2080 0370 013A83E2 		add	r3, r3, #4096
 2081 0374 053083E2 		add	r3, r3, #5
 2082 0378 910383E0 		umull	r0, r3, r1, r3
 2083 037c 011063E0 		rsb	r1, r3, r1
 2084 0380 A110A0E1 		mov	r1, r1, lsr #1
 2085 0384 013083E0 		add	r3, r3, r1
 2086 0388 A334A0E1 		mov	r3, r3, lsr #9
 2087 038c 003082E5 		str	r3, [r2, #0]
 2088 0390 180000EA 		b	.L2
 2089              	.L8:
  78:../Modules/pwm.c **** 	else if(pwmchannel == 6){PWMMR6 = (dutyccycle  * CALCPWM)/1023;}
 2090              		.loc 1 78 0 is_stmt 1
 2091 0394 08301BE5 		ldr	r3, [fp, #-8]
 2092 0398 060053E3 		cmp	r3, #6
 2093 039c 1500001A 		bne	.L2
 2094              		.loc 1 78 0 is_stmt 0 discriminator 1
 2095 03a0 0E22A0E3 		mov	r2, #-536870912
 2096 03a4 052982E2 		add	r2, r2, #81920
 2097 03a8 482082E2 		add	r2, r2, #72
 2098 03ac 0C101BE5 		ldr	r1, [fp, #-12]
 2099 03b0 0130A0E1 		mov	r3, r1
 2100 03b4 0331A0E1 		mov	r3, r3, asl #2
 2101 03b8 013083E0 		add	r3, r3, r1
 2102 03bc 0311A0E1 		mov	r1, r3, asl #2
 2103 03c0 013083E0 		add	r3, r3, r1
 2104 03c4 0312A0E1 		mov	r1, r3, asl #4
 2105 03c8 011063E0 		rsb	r1, r3, r1
 2106 03cc 0133A0E1 		mov	r3, r1, asl #6
 2107 03d0 0310A0E1 		mov	r1, r3
 2108 03d4 0135A0E3 		mov	r3, #4194304
 2109 03d8 013A83E2 		add	r3, r3, #4096
 2110 03dc 053083E2 		add	r3, r3, #5
 2111 03e0 910383E0 		umull	r0, r3, r1, r3
 2112 03e4 011063E0 		rsb	r1, r3, r1
 2113 03e8 A110A0E1 		mov	r1, r1, lsr #1
 2114 03ec 013083E0 		add	r3, r3, r1
 2115 03f0 A334A0E1 		mov	r3, r3, lsr #9
 2116 03f4 003082E5 		str	r3, [r2, #0]
 2117              	.L2:
  79:../Modules/pwm.c **** }
 2118              		.loc 1 79 0 is_stmt 1
 2119 03f8 00D08BE2 		add	sp, fp, #0
 2120 03fc 0008BDE8 		ldmfd	sp!, {fp}
 2121 0400 1EFF2FE1 		bx	lr
 2122              		.cfi_endproc
 2123              	.LFE1:
 2125              		.global	__aeabi_uidiv
 2126              		.align	2
 2127              		.global	setDOF1_PWM
 2129              	setDOF1_PWM:
 2130              	.LFB2:
  80:../Modules/pwm.c **** 
  81:../Modules/pwm.c **** /*void setDutyCycle(unsigned int pwmchannel, unsigned int dutyccycle){
  82:../Modules/pwm.c **** 	if(pwmchannel == 1){PWMMR1 = (600000/PWMFREQUENCY) * dutyccycle;}
  83:../Modules/pwm.c **** 	else if(pwmchannel == 2){PWMMR2 = (600000/PWMFREQUENCY) * dutyccycle;}
  84:../Modules/pwm.c **** 	else if(pwmchannel == 3){PWMMR3 = (600000/PWMFREQUENCY) * dutyccycle;}
  85:../Modules/pwm.c **** 	else if(pwmchannel == 4){PWMMR4 = (600000/PWMFREQUENCY) * dutyccycle;}
  86:../Modules/pwm.c **** 	else if(pwmchannel == 5){PWMMR5 = (600000/PWMFREQUENCY) * dutyccycle;}
  87:../Modules/pwm.c **** 	else if(pwmchannel == 6){PWMMR6 = (600000/PWMFREQUENCY) * dutyccycle;}
  88:../Modules/pwm.c **** }*/
  89:../Modules/pwm.c **** 
  90:../Modules/pwm.c **** void setDOF1_PWM(unsigned int frequency)
  91:../Modules/pwm.c **** {
 2131              		.loc 1 91 0
 2132              		.cfi_startproc
 2133              		@ Function supports interworking.
 2134              		@ args = 0, pretend = 0, frame = 8
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136 0404 10482DE9 		stmfd	sp!, {r4, fp, lr}
 2137              	.LCFI4:
 2138              		.cfi_def_cfa_offset 12
 2139 0408 08B08DE2 		add	fp, sp, #8
 2140              		.cfi_offset 14, -4
 2141              		.cfi_offset 11, -8
 2142              		.cfi_offset 4, -12
 2143              	.LCFI5:
 2144              		.cfi_def_cfa 11, 4
 2145 040c 0CD04DE2 		sub	sp, sp, #12
 2146 0410 10000BE5 		str	r0, [fp, #-16]
  92:../Modules/pwm.c **** 	//Configuration for PWM 2 operation
  93:../Modules/pwm.c **** 	PINSEL0 &= ~(3 << 14);
 2147              		.loc 1 93 0
 2148 0414 0E32A0E3 		mov	r3, #-536870912
 2149 0418 0B3983E2 		add	r3, r3, #180224
 2150 041c 0E22A0E3 		mov	r2, #-536870912
 2151 0420 0B2982E2 		add	r2, r2, #180224
 2152 0424 002092E5 		ldr	r2, [r2, #0]
 2153 0428 0329C2E3 		bic	r2, r2, #49152
 2154 042c 002083E5 		str	r2, [r3, #0]
  94:../Modules/pwm.c **** 	PINSEL0 |= (1 << 15);;
 2155              		.loc 1 94 0
 2156 0430 0E32A0E3 		mov	r3, #-536870912
 2157 0434 0B3983E2 		add	r3, r3, #180224
 2158 0438 0E22A0E3 		mov	r2, #-536870912
 2159 043c 0B2982E2 		add	r2, r2, #180224
 2160 0440 002092E5 		ldr	r2, [r2, #0]
 2161 0444 022982E3 		orr	r2, r2, #32768
 2162 0448 002083E5 		str	r2, [r3, #0]
  95:../Modules/pwm.c **** 	PWMTCR = 0x02;
 2163              		.loc 1 95 0
 2164 044c 4E32A0E3 		mov	r3, #-536870908
 2165 0450 053983E2 		add	r3, r3, #81920
 2166 0454 0220A0E3 		mov	r2, #2
 2167 0458 002083E5 		str	r2, [r3, #0]
  96:../Modules/pwm.c **** 	PWMMR0 = 60000000/frequency;
 2168              		.loc 1 96 0
 2169 045c 0E42A0E3 		mov	r4, #-536870912
 2170 0460 054984E2 		add	r4, r4, #81920
 2171 0464 184084E2 		add	r4, r4, #24
 2172 0468 E507A0E3 		mov	r0, #60030976
 2173 046c 790C40E2 		sub	r0, r0, #30976
 2174 0470 10101BE5 		ldr	r1, [fp, #-16]
 2175 0474 FEFFFFEB 		bl	__aeabi_uidiv
 2176 0478 0030A0E1 		mov	r3, r0
 2177 047c 003084E5 		str	r3, [r4, #0]
  97:../Modules/pwm.c **** 	PWMPR = 0;
 2178              		.loc 1 97 0
 2179 0480 CE32A0E3 		mov	r3, #-536870900
 2180 0484 053983E2 		add	r3, r3, #81920
 2181 0488 0020A0E3 		mov	r2, #0
 2182 048c 002083E5 		str	r2, [r3, #0]
  98:../Modules/pwm.c **** 	PWMPCR &= ~((1 << 2) | (1 << 4) | (1 << 5));
 2183              		.loc 1 98 0
 2184 0490 0E32A0E3 		mov	r3, #-536870912
 2185 0494 053983E2 		add	r3, r3, #81920
 2186 0498 4C3083E2 		add	r3, r3, #76
 2187 049c 0E22A0E3 		mov	r2, #-536870912
 2188 04a0 052982E2 		add	r2, r2, #81920
 2189 04a4 4C2082E2 		add	r2, r2, #76
 2190 04a8 002092E5 		ldr	r2, [r2, #0]
 2191 04ac 3420C2E3 		bic	r2, r2, #52
 2192 04b0 002083E5 		str	r2, [r3, #0]
  99:../Modules/pwm.c **** 	PWMPCR |= ((1 << 13) | (1 << 12) | (1 << 10)); // Sets PWM 2,4,5 as single edge output
 2193              		.loc 1 99 0
 2194 04b4 0E32A0E3 		mov	r3, #-536870912
 2195 04b8 053983E2 		add	r3, r3, #81920
 2196 04bc 4C3083E2 		add	r3, r3, #76
 2197 04c0 0E22A0E3 		mov	r2, #-536870912
 2198 04c4 052982E2 		add	r2, r2, #81920
 2199 04c8 4C2082E2 		add	r2, r2, #76
 2200 04cc 002092E5 		ldr	r2, [r2, #0]
 2201 04d0 0D2B82E3 		orr	r2, r2, #13312
 2202 04d4 002083E5 		str	r2, [r3, #0]
 100:../Modules/pwm.c **** 	PWMTCR = 00001001;
 2203              		.loc 1 100 0
 2204 04d8 4E32A0E3 		mov	r3, #-536870908
 2205 04dc 053983E2 		add	r3, r3, #81920
 2206 04e0 022CA0E3 		mov	r2, #512
 2207 04e4 012082E2 		add	r2, r2, #1
 2208 04e8 002083E5 		str	r2, [r3, #0]
 101:../Modules/pwm.c **** 	PWMMCR = 0x0000003;
 2209              		.loc 1 101 0
 2210 04ec 0E32A0E3 		mov	r3, #-536870912
 2211 04f0 053983E2 		add	r3, r3, #81920
 2212 04f4 143083E2 		add	r3, r3, #20
 2213 04f8 0320A0E3 		mov	r2, #3
 2214 04fc 002083E5 		str	r2, [r3, #0]
 102:../Modules/pwm.c **** }
 2215              		.loc 1 102 0
 2216 0500 08D04BE2 		sub	sp, fp, #8
 2217 0504 1048BDE8 		ldmfd	sp!, {r4, fp, lr}
 2218 0508 1EFF2FE1 		bx	lr
 2219              		.cfi_endproc
 2220              	.LFE2:
 2222              		.align	2
 2223              		.global	setDOF1_DutyCycle
 2225              	setDOF1_DutyCycle:
 2226              	.LFB3:
 103:../Modules/pwm.c **** 
 104:../Modules/pwm.c **** void setDOF1_DutyCycle(unsigned int dutycycle){
 2227              		.loc 1 104 0
 2228              		.cfi_startproc
 2229              		@ Function supports interworking.
 2230              		@ args = 0, pretend = 0, frame = 8
 2231              		@ frame_needed = 1, uses_anonymous_args = 0
 2232              		@ link register save eliminated.
 2233 050c 04B02DE5 		str	fp, [sp, #-4]!
 2234              	.LCFI6:
 2235              		.cfi_def_cfa_offset 4
 2236 0510 00B08DE2 		add	fp, sp, #0
 2237              		.cfi_offset 11, -4
 2238              	.LCFI7:
 2239              		.cfi_def_cfa_register 11
 2240 0514 0CD04DE2 		sub	sp, sp, #12
 2241 0518 08000BE5 		str	r0, [fp, #-8]
 105:../Modules/pwm.c **** 	//Set PWM Duty Cycle for PWM 2
 106:../Modules/pwm.c **** 	PWMMR2 = 600 * dutycycle;
 2242              		.loc 1 106 0
 2243 051c 0E22A0E3 		mov	r2, #-536870912
 2244 0520 052982E2 		add	r2, r2, #81920
 2245 0524 202082E2 		add	r2, r2, #32
 2246 0528 08101BE5 		ldr	r1, [fp, #-8]
 2247 052c 0130A0E1 		mov	r3, r1
 2248 0530 0331A0E1 		mov	r3, r3, asl #2
 2249 0534 013083E0 		add	r3, r3, r1
 2250 0538 0312A0E1 		mov	r1, r3, asl #4
 2251 053c 011063E0 		rsb	r1, r3, r1
 2252 0540 8131A0E1 		mov	r3, r1, asl #3
 2253 0544 003082E5 		str	r3, [r2, #0]
 107:../Modules/pwm.c **** }
 2254              		.loc 1 107 0
 2255 0548 00D08BE2 		add	sp, fp, #0
 2256 054c 0008BDE8 		ldmfd	sp!, {fp}
 2257 0550 1EFF2FE1 		bx	lr
 2258              		.cfi_endproc
 2259              	.LFE3:
 2261              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 pwm.c
C:\Users\Daniel\AppData\Local\Temp\ccBgrn68.s:1796   .text:00000000 $a
C:\Users\Daniel\AppData\Local\Temp\ccBgrn68.s:1799   .text:00000000 PWMInit
C:\Users\Daniel\AppData\Local\Temp\ccBgrn68.s:1927   .text:00000178 setDutyCycle
C:\Users\Daniel\AppData\Local\Temp\ccBgrn68.s:2129   .text:00000404 setDOF1_PWM
C:\Users\Daniel\AppData\Local\Temp\ccBgrn68.s:2225   .text:0000050c setDOF1_DutyCycle
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
