   1              	# 1 "../startup.S"
   1              	/****************************************************************************
   0              	
   0              	
   0              	
   2              	*  Copyright (c) 2009 by Michael Fischer. All rights reserved.
   3              	*
   4              	*  Redistribution and use in source and binary forms, with or without 
   5              	*  modification, are permitted provided that the following conditions 
   6              	*  are met:
   7              	*  
   8              	*  1. Redistributions of source code must retain the above copyright 
   9              	*     notice, this list of conditions and the following disclaimer.
  10              	*  2. Redistributions in binary form must reproduce the above copyright
  11              	*     notice, this list of conditions and the following disclaimer in the 
  12              	*     documentation and/or other materials provided with the distribution.
  13              	*  3. Neither the name of the author nor the names of its contributors may 
  14              	*     be used to endorse or promote products derived from this software 
  15              	*     without specific prior written permission.
  16              	*
  17              	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
  18              	*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
  19              	*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
  20              	*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
  21              	*  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
  22              	*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
  23              	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS 
  24              	*  OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
  25              	*  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
  26              	*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
  27              	*  THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
  28              	*  SUCH DAMAGE.
  29              	*
  30              	****************************************************************************
  31              	*
  32              	*  History:
  33              	*
  34              	*  25.09.09  mifi   First Version, based on the example from Quantum Leaps 
  35              	*                   with some small modifications. The original can be find 
  36              	*                   here: http://www.embedded.com/design/200900043
  37              	****************************************************************************/
  38              	
  39              	/*****************************************************************************
  40              	* Product: Generic startup code for ARM with GNU toolset
  41              	* Date of the Last Update:  Jun 12, 2007
  42              	*
  43              	*                    Q u a n t u m     L e a P s
  44              	*                    ---------------------------
  45              	*                    innovating embedded systems
  46              	*
  47              	* Copyright (C) 2007 Quantum Leaps, LLC. All rights reserved.
  48              	*
  49              	* Contact information:
  50              	* Quantum Leaps Web site:  http://www.quantum-leaps.com
  51              	* e-mail:                  info@quantum-leaps.com
  52              	*****************************************************************************/
  53              	
  54              	/* Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs */
  55              	
  56              	    .equ    I_BIT,          0x00      /* when I bit is set, IRQ is disabled */
  57              	    .equ    F_BIT,          0x40      /* when F bit is set, FIQ is disabled */
  58              	
  59              	    .equ    USR_MODE,       0x10
  60              	    .equ    FIQ_MODE,       0x11
  61              	    .equ    IRQ_MODE,       0x12
  62              	    .equ    SVC_MODE,       0x13
  63              	    .equ    ABT_MODE,       0x17
  64              	    .equ    UND_MODE,       0x1B
  65              	    .equ    SYS_MODE,       0x1F
  66              	
  67              	/* constant to pre-fill the stack */
  68              	    .equ    STACK_FILL,     0xAAAAAAAA
  69              	
  70              	/*****************************************************************************
  71              	* The starupt code must be linked at the start of ROM, which is NOT
  72              	* necessarily address zero.
  73              	*/
  74              	    .text
  75              	    .code 32
  76              	
  77              	    .global _start
  78              	    .func   _start
  79              	
  80              	_start:
  81              	
  82              	    /* Vector table
  83              	    * NOTE: used only very briefly until RAM is remapped to address zero
  84              	    */
  85 0000 18F09FE5 	    LDR     pc, ResetAddr    /* Reset                 */
  86 0004 18F09FE5 	    LDR     pc, UndefAddr    /* Undefined instruction */
  87 0008 18F09FE5 	    LDR     pc, SWIAddr      /* Software interrupt    */
  88 000c 18F09FE5 	    LDR     pc, PAbortAddr   /* Prefetch abort        */
  89 0010 18F09FE5 	    LDR     pc, DAbortAddr   /* Data abort            */
  90 0014 18F09FE5 	    LDR     pc, ReservedAddr /* Reserved              */
  91 0018 F0FF1FE5 	    LDR     pc, [pc,#-0xFF0] /* IRQ - read the VIC and jumps to the vectored IRQ handler */
  92 001c 18F09FE5 	    LDR     pc, FIQAddr      /* FIQ interrupt         */
  93              	    
  94 0020 40000000 	ResetAddr:     .word _reset
  95 0024 00000000 	UndefAddr:     .word UndefHandler
  96 0028 00000000 	SWIAddr:       .word SWIHandler
  97 002c 00000000 	PAbortAddr:    .word PAbortHandler
  98 0030 00000000 	DAbortAddr:    .word DAbortHandler
  99 0034 00000000 	ReservedAddr:  .word 0
 100 0038 00000000 	IRQAddr:       .word IRQHandler
 101 003c 00000000 	FIQAddr:       .word FIQHandler
 102              	
 103              	    .align 4             /* Align to the word boundary */
 104              	
 105              	
 106              	/*****************************************************************************
 107              	* _reset
 108              	*/
 109              	_reset:
 110              	
 111              	    /*
 112              	     * Wait for the oscillator is stable
 113              	     */   
 114 0040 0000A0E1 	    nop
 115 0044 0000A0E1 	    nop
 116 0048 0000A0E1 	    nop
 117 004c 0000A0E1 	    nop
 118 0050 0000A0E1 	    nop
 119 0054 0000A0E1 	    nop
 120 0058 0000A0E1 	    nop
 121 005c 0000A0E1 	    nop
 122              	
 123              	    /* Call the platform-specific low-level initialization routine
 124              	    *
 125              	    * NOTE: The ROM is typically NOT at its linked address before the remap,
 126              	    * so the branch to low_level_init() must be relative (position
 127              	    * independent code). The low_level_init() function must continue to
 128              	    * execute in ARM state. Also, the function low_level_init() cannot rely
 129              	    * on uninitialized data being cleared and cannot use any initialized
 130              	    * data, because the .bss and .data sections have not been initialized yet.
 131              	    */
 132 0060 D8009FE5 	    LDR     r0,=_reset           /* pass the reset address as the 1st argument */
 133 0064 D8109FE5 	    LDR     r1,=_cstartup        /* pass the return address as the 2nd argument */
 134 0068 01E0A0E1 	    MOV     lr,r1                /* set the return address after the remap */
 135 006c D4D09FE5 	    LDR     sp,=__stack_end__    /* set the temporary stack pointer */
 136 0070 FEFFFFEA 	    B       low_level_init       /* relative branch enables remap */
 137              	
 138              	
 139              	    /* NOTE: after the return from low_level_init() the ROM is remapped
 140              	    * to its linked address so the rest of the code executes at its linked
 141              	    * address.
 142              	    */
 143              	
 144              	_cstartup:
 145              	    /* Relocate .fastcode section (copy from ROM to RAM) */
 146 0074 D0009FE5 	    LDR     r0,=__fastcode_load
 147 0078 D0109FE5 	    LDR     r1,=__fastcode_start
 148 007c D0209FE5 	    LDR     r2,=__fastcode_end
 149              	1:
 150 0080 020051E1 	    CMP     r1,r2
 151 0084 0800B0B8 	    LDMLTIA r0!,{r3}
 152 0088 0800A1B8 	    STMLTIA r1!,{r3}
 153 008c FBFFFFBA 	    BLT     1b
 154              	
 155              	
 156              	    /* Relocate the .data section (copy from ROM to RAM) */
 157 0090 C0009FE5 	    LDR     r0,=__data_load
 158 0094 C0109FE5 	    LDR     r1,=__data_start
 159 0098 C0209FE5 	    LDR     r2,=_edata
 160              	1:
 161 009c 020051E1 	    CMP     r1,r2
 162 00a0 0800B0B8 	    LDMLTIA r0!,{r3}
 163 00a4 0800A1B8 	    STMLTIA r1!,{r3}
 164 00a8 FBFFFFBA 	    BLT     1b
 165              	
 166              	
 167              	    /* Clear the .bss section (zero init) */
 168 00ac B0109FE5 	    LDR     r1,=__bss_start__
 169 00b0 B0209FE5 	    LDR     r2,=__bss_end__
 170 00b4 0030A0E3 	    MOV     r3,#0
 171              	1:
 172 00b8 020051E1 	    CMP     r1,r2
 173 00bc 0800A1B8 	    STMLTIA r1!,{r3}
 174 00c0 FCFFFFBA 	    BLT     1b
 175              	
 176              	
 177              	    /* Fill the .stack section */
 178 00c4 A0109FE5 	    LDR     r1,=__stack_start__
 179 00c8 78209FE5 	    LDR     r2,=__stack_end__
 180 00cc 9C309FE5 	    LDR     r3,=STACK_FILL
 181              	1:
 182 00d0 020052E1 	    CMP     r2,r2
 183 00d4 0800A1B8 	    STMLTIA r1!,{r3}
 184 00d8 FCFFFFBA 	    BLT     1b
 185              	
 186              	    /* Initialize stack pointers for all ARM modes */
 187 00dc 52F021E3 	    MSR     CPSR_c,#(IRQ_MODE | I_BIT | F_BIT)
 188 00e0 8CD09FE5 	    LDR     sp,=__irq_stack_top__                /* set the IRQ stack pointer */
 189              	
 190 00e4 51F021E3 	    MSR     CPSR_c,#(FIQ_MODE | I_BIT | F_BIT)
 191 00e8 88D09FE5 	    LDR     sp,=__fiq_stack_top__                /* set the FIQ stack pointer */
 192              	
 193 00ec 53F021E3 	    MSR     CPSR_c,#(SVC_MODE | I_BIT | F_BIT)
 194 00f0 84D09FE5 	    LDR     sp,=__svc_stack_top__                /* set the SVC stack pointer */
 195              	
 196 00f4 57F021E3 	    MSR     CPSR_c,#(ABT_MODE | I_BIT | F_BIT)
 197 00f8 80D09FE5 	    LDR     sp,=__abt_stack_top__                /* set the ABT stack pointer */
 198              	
 199 00fc 5BF021E3 	    MSR     CPSR_c,#(UND_MODE | I_BIT | F_BIT)
 200 0100 7CD09FE5 	    LDR     sp,=__und_stack_top__                /* set the UND stack pointer */
 201              	
 202 0104 5FF021E3 	    MSR     CPSR_c,#(SYS_MODE | I_BIT | F_BIT)
 203 0108 78D09FE5 	    LDR     sp,=__c_stack_top__                  /* set the C stack pointer */
 204              	
 205              	
 206              	#if 0
 207              	    /* Invoke the static constructors */
 208              	    LDR     r12,=__libc_init_array
 209              	    MOV     lr,pc           /* set the return address */
 210              	    BX      r12             /* the target code can be ARM or THUMB */
 211              	#endif    
 212              	
 213              	
 214              	    /* Enter the C/C++ code */
 215 010c 78C09FE5 	    LDR     r12,=main
 216 0110 0FE0A0E1 	    MOV     lr,pc           /* set the return address */
 217 0114 1CFF2FE1 	    BX      r12             /* the target code can be ARM or THUMB */
 218              	    
 219              	ExitFunction:
 220 0118 0000A0E1 	    NOP
 221 011c 0000A0E1 	    NOP
 222 0120 0000A0E1 	    NOP
 223 0124 FEFFFFEA 	    b       ExitFunction   
 224              	    
 226              	    .endfunc
 227              	    
 228              	/****************************************************************************/
 229              	/*                         Default interrupt handler                        */
 230              	/****************************************************************************/
 231              	
 232              	UndefHandler:
 233 0128 FEFFFFEA 	   b UndefHandler
 234              	   
 235              	SWIHandler:
 236 012c FEFFFFEA 	   b SWIHandler
 237              	
 238              	PAbortHandler:
 239 0130 FEFFFFEA 	   b PAbortHandler
 240              	
 241              	DAbortHandler:
 242 0134 FEFFFFEA 	   b DAbortHandler
 243              	   
 244              	IRQHandler:
 245 0138 FEFFFFEA 	   b IRQHandler
 246              	   
 247              	FIQHandler:
 248 013c FEFFFFEA 	   b FIQHandler
 249              	   
 250              	   .weak ExitFunction
 251              	   .weak UndefHandler, SWIHandler, PAbortHandler, DAbortHandler
 252              	   .weak IRQHandler, FIQHandler
 253              	    
 254 0140 40000000 	   .end
 254      74000000 
 254      00000000 
 254      00000000 
 254      00000000 
DEFINED SYMBOLS
        ../startup.S:56     *ABS*:00000000 I_BIT
        ../startup.S:57     *ABS*:00000040 F_BIT
        ../startup.S:59     *ABS*:00000010 USR_MODE
        ../startup.S:60     *ABS*:00000011 FIQ_MODE
        ../startup.S:61     *ABS*:00000012 IRQ_MODE
        ../startup.S:62     *ABS*:00000013 SVC_MODE
        ../startup.S:63     *ABS*:00000017 ABT_MODE
        ../startup.S:64     *ABS*:0000001b UND_MODE
        ../startup.S:65     *ABS*:0000001f SYS_MODE
        ../startup.S:68     *ABS*:aaaaaaaa STACK_FILL
        ../startup.S:80     .text:00000000 _start
        ../startup.S:94     .text:00000020 ResetAddr
        ../startup.S:85     .text:00000000 $a
        ../startup.S:95     .text:00000024 UndefAddr
        ../startup.S:96     .text:00000028 SWIAddr
        ../startup.S:97     .text:0000002c PAbortAddr
        ../startup.S:98     .text:00000030 DAbortAddr
        ../startup.S:99     .text:00000034 ReservedAddr
        ../startup.S:101    .text:0000003c FIQAddr
        ../startup.S:94     .text:00000020 $d
        ../startup.S:109    .text:00000040 _reset
        ../startup.S:232    .text:00000128 UndefHandler
        ../startup.S:235    .text:0000012c SWIHandler
        ../startup.S:238    .text:00000130 PAbortHandler
        ../startup.S:241    .text:00000134 DAbortHandler
        ../startup.S:100    .text:00000038 IRQAddr
        ../startup.S:244    .text:00000138 IRQHandler
        ../startup.S:247    .text:0000013c FIQHandler
        ../startup.S:103    .text:00000040 $a
        ../startup.S:144    .text:00000074 _cstartup
        ../startup.S:219    .text:00000118 ExitFunction
        ../startup.S:254    .text:00000140 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
__stack_end__
low_level_init
__fastcode_load
__fastcode_start
__fastcode_end
__data_load
__data_start
_edata
__bss_start__
__bss_end__
__stack_start__
__irq_stack_top__
__fiq_stack_top__
__svc_stack_top__
__abt_stack_top__
__und_stack_top__
__c_stack_top__
main
