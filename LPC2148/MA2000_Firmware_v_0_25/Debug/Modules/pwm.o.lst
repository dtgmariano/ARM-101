   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"pwm.c"
  21              	.Ltext0:
  22              		.file 1 "../Modules/pwm.c"
 1796              		.align	2
 1797              		.global	PWMInit
 1799              	PWMInit:
 1800              	.LFB0:
   1:../Modules/pwm.c **** /*------------------------------------------------------------------------------------*/
   2:../Modules/pwm.c **** /*                                       HEADER                                       */
   3:../Modules/pwm.c **** /*------------------------------------------------------------------------------------*/
   4:../Modules/pwm.c **** 
   5:../Modules/pwm.c **** /***************************************************************************************
   6:../Modules/pwm.c ****  *Project Name: MA2000 Firmware
   7:../Modules/pwm.c ****  *	   Version: 0.24
   8:../Modules/pwm.c ****  *   File Name: pwm.c
   9:../Modules/pwm.c ****  *  Created on: 19/03/2013
  10:../Modules/pwm.c ****  *      Author: Daniel Teodoro G. Mariano
  11:../Modules/pwm.c ****  *       Email: dtgm@uol.com.br
  12:../Modules/pwm.c ****  * Description: Sets PWM Module for LPC2148, based on the MA2000 Robot Project
  13:../Modules/pwm.c **** ***************************************************************************************/
  14:../Modules/pwm.c **** 
  15:../Modules/pwm.c **** #include "LPC214x.h"
  16:../Modules/pwm.c **** #include "pwm.h"
  17:../Modules/pwm.c **** 
  18:../Modules/pwm.c **** #define PWMFREQUENCY 50
  19:../Modules/pwm.c **** #define CALCPWM (60000000/PWMFREQUENCY)
  20:../Modules/pwm.c **** 
  21:../Modules/pwm.c **** void PWMInit()
  22:../Modules/pwm.c **** {
 1801              		.loc 1 22 0
 1802              		.cfi_startproc
 1803              		@ Function supports interworking.
 1804              		@ args = 0, pretend = 0, frame = 0
 1805              		@ frame_needed = 1, uses_anonymous_args = 0
 1806              		@ link register save eliminated.
 1807 0000 04B02DE5 		str	fp, [sp, #-4]!
 1808              	.LCFI0:
 1809              		.cfi_def_cfa_offset 4
 1810 0004 00B08DE2 		add	fp, sp, #0
 1811              		.cfi_offset 11, -4
 1812              	.LCFI1:
 1813              		.cfi_def_cfa_register 11
  23:../Modules/pwm.c **** 	//Setting PWM2 function: Sets P0.7 with value 10 for Bits 15 and 14 (PINSEL0)
  24:../Modules/pwm.c **** 	//P0.7 -> EXT1-8 -> Pin 20
  25:../Modules/pwm.c **** 	PINSEL0 &= ~(3 << 14);
 1814              		.loc 1 25 0
 1815 0008 0E32A0E3 		mov	r3, #-536870912
 1816 000c 0B3983E2 		add	r3, r3, #180224
 1817 0010 0E22A0E3 		mov	r2, #-536870912
 1818 0014 0B2982E2 		add	r2, r2, #180224
 1819 0018 002092E5 		ldr	r2, [r2, #0]
 1820 001c 0329C2E3 		bic	r2, r2, #49152
 1821 0020 002083E5 		str	r2, [r3, #0]
  26:../Modules/pwm.c **** 	PINSEL0 |= (1 << 15);
 1822              		.loc 1 26 0
 1823 0024 0E32A0E3 		mov	r3, #-536870912
 1824 0028 0B3983E2 		add	r3, r3, #180224
 1825 002c 0E22A0E3 		mov	r2, #-536870912
 1826 0030 0B2982E2 		add	r2, r2, #180224
 1827 0034 002092E5 		ldr	r2, [r2, #0]
 1828 0038 022982E3 		orr	r2, r2, #32768
 1829 003c 002083E5 		str	r2, [r3, #0]
  27:../Modules/pwm.c **** 
  28:../Modules/pwm.c **** 	//Setting PWM4 function: Sets P0.8 with value 10 for Bits 17 and 16 (PINSEL0)
  29:../Modules/pwm.c **** 	//P0.8 -> EXT1-9 -> Pin 17
  30:../Modules/pwm.c **** 	PINSEL0 &= ~(3 << 16);
 1830              		.loc 1 30 0
 1831 0040 0E32A0E3 		mov	r3, #-536870912
 1832 0044 0B3983E2 		add	r3, r3, #180224
 1833 0048 0E22A0E3 		mov	r2, #-536870912
 1834 004c 0B2982E2 		add	r2, r2, #180224
 1835 0050 002092E5 		ldr	r2, [r2, #0]
 1836 0054 0328C2E3 		bic	r2, r2, #196608
 1837 0058 002083E5 		str	r2, [r3, #0]
  31:../Modules/pwm.c **** 	PINSEL0 |= (1 << 17);
 1838              		.loc 1 31 0
 1839 005c 0E32A0E3 		mov	r3, #-536870912
 1840 0060 0B3983E2 		add	r3, r3, #180224
 1841 0064 0E22A0E3 		mov	r2, #-536870912
 1842 0068 0B2982E2 		add	r2, r2, #180224
 1843 006c 002092E5 		ldr	r2, [r2, #0]
 1844 0070 022882E3 		orr	r2, r2, #131072
 1845 0074 002083E5 		str	r2, [r3, #0]
  32:../Modules/pwm.c **** 
  33:../Modules/pwm.c **** 	//Setting PWM5 function: Sets P0.21 with value 01 for Bits 11 and 10 (PINSEL1)
  34:../Modules/pwm.c **** 	//P0.21 -> EXT1-22 -> Pin 6
  35:../Modules/pwm.c **** 	PINSEL1 &= ~(3 << 11);
 1846              		.loc 1 35 0
 1847 0078 4E32A0E3 		mov	r3, #-536870908
 1848 007c 0B3983E2 		add	r3, r3, #180224
 1849 0080 4E22A0E3 		mov	r2, #-536870908
 1850 0084 0B2982E2 		add	r2, r2, #180224
 1851 0088 002092E5 		ldr	r2, [r2, #0]
 1852 008c 062BC2E3 		bic	r2, r2, #6144
 1853 0090 002083E5 		str	r2, [r3, #0]
  36:../Modules/pwm.c **** 	PINSEL1 |= (1 << 10);
 1854              		.loc 1 36 0
 1855 0094 4E32A0E3 		mov	r3, #-536870908
 1856 0098 0B3983E2 		add	r3, r3, #180224
 1857 009c 4E22A0E3 		mov	r2, #-536870908
 1858 00a0 0B2982E2 		add	r2, r2, #180224
 1859 00a4 002092E5 		ldr	r2, [r2, #0]
 1860 00a8 012B82E3 		orr	r2, r2, #1024
 1861 00ac 002083E5 		str	r2, [r3, #0]
  37:../Modules/pwm.c **** 
  38:../Modules/pwm.c **** 	//PWM Timer Control Register. The PWMTCR is used to control the Timer
  39:../Modules/pwm.c **** 	//Counter functions. The Timer Counter can be disabled or reset through
  40:../Modules/pwm.c **** 	//the PWMTCR.
  41:../Modules/pwm.c **** 	PWMTCR = 0x02; // reset PWM
 1862              		.loc 1 41 0
 1863 00b0 4E32A0E3 		mov	r3, #-536870908
 1864 00b4 053983E2 		add	r3, r3, #81920
 1865 00b8 0220A0E3 		mov	r2, #2
 1866 00bc 002083E5 		str	r2, [r3, #0]
  42:../Modules/pwm.c **** 
  43:../Modules/pwm.c **** 	//PWMMR0 = 60000000/PWMFREQUENCY;
  44:../Modules/pwm.c **** 	PWMMR0 = CALCPWM;
 1867              		.loc 1 44 0
 1868 00c0 0E32A0E3 		mov	r3, #-536870912
 1869 00c4 053983E2 		add	r3, r3, #81920
 1870 00c8 183083E2 		add	r3, r3, #24
 1871 00cc 4929A0E3 		mov	r2, #1196032
 1872 00d0 3E2D82E2 		add	r2, r2, #3968
 1873 00d4 002083E5 		str	r2, [r3, #0]
  45:../Modules/pwm.c **** 
  46:../Modules/pwm.c **** 	//PWM Prescale Register. The PWMTC is incremented every PWMPR+1
  47:../Modules/pwm.c **** 	//cycles of PCLK.
  48:../Modules/pwm.c **** 	PWMPR = 0; // Prescale unable
 1874              		.loc 1 48 0
 1875 00d8 CE32A0E3 		mov	r3, #-536870900
 1876 00dc 053983E2 		add	r3, r3, #81920
 1877 00e0 0020A0E3 		mov	r2, #0
 1878 00e4 002083E5 		str	r2, [r3, #0]
  49:../Modules/pwm.c **** 
  50:../Modules/pwm.c **** 	//PWM Control Register. Enables PWM outputs and selects PWM channel
  51:../Modules/pwm.c **** 	//types as either single edge or double edge controlled.
  52:../Modules/pwm.c **** 	PWMPCR &= ~((1 << 2) | (1 << 4) | (1 << 5));
 1879              		.loc 1 52 0
 1880 00e8 0E32A0E3 		mov	r3, #-536870912
 1881 00ec 053983E2 		add	r3, r3, #81920
 1882 00f0 4C3083E2 		add	r3, r3, #76
 1883 00f4 0E22A0E3 		mov	r2, #-536870912
 1884 00f8 052982E2 		add	r2, r2, #81920
 1885 00fc 4C2082E2 		add	r2, r2, #76
 1886 0100 002092E5 		ldr	r2, [r2, #0]
 1887 0104 3420C2E3 		bic	r2, r2, #52
 1888 0108 002083E5 		str	r2, [r3, #0]
  53:../Modules/pwm.c **** 	PWMPCR |= ((1 << 13) | (1 << 12) | (1 << 10)); // Sets PWM 2,4,5 as single edge output
 1889              		.loc 1 53 0
 1890 010c 0E32A0E3 		mov	r3, #-536870912
 1891 0110 053983E2 		add	r3, r3, #81920
 1892 0114 4C3083E2 		add	r3, r3, #76
 1893 0118 0E22A0E3 		mov	r2, #-536870912
 1894 011c 052982E2 		add	r2, r2, #81920
 1895 0120 4C2082E2 		add	r2, r2, #76
 1896 0124 002092E5 		ldr	r2, [r2, #0]
 1897 0128 0D2B82E3 		orr	r2, r2, #13312
 1898 012c 002083E5 		str	r2, [r3, #0]
  54:../Modules/pwm.c **** 	//PWMPCR = 0x0000200; 	// ativa PWM1 como saída para PWM de borda simples
  55:../Modules/pwm.c **** 
  56:../Modules/pwm.c **** 	//PWM Timer Control Register. The PWMTCR is used to control the Timer
  57:../Modules/pwm.c **** 	//Counter functions. The Timer Counter can be disabled or reset through
  58:../Modules/pwm.c **** 	//the PWMTCR.
  59:../Modules/pwm.c **** 	PWMTCR = 00001001; // Counter and PWM enabled
 1899              		.loc 1 59 0
 1900 0130 4E32A0E3 		mov	r3, #-536870908
 1901 0134 053983E2 		add	r3, r3, #81920
 1902 0138 022CA0E3 		mov	r2, #512
 1903 013c 012082E2 		add	r2, r2, #1
 1904 0140 002083E5 		str	r2, [r3, #0]
  60:../Modules/pwm.c **** 
  61:../Modules/pwm.c **** 	//The PWM Match Control Register is used to control what operations are performed when
  62:../Modules/pwm.c **** 	//one of the PWM Match Registers matches the PWM Timer Counter.
  63:../Modules/pwm.c **** 	PWMMCR = 0x0000003;
 1905              		.loc 1 63 0
 1906 0144 0E32A0E3 		mov	r3, #-536870912
 1907 0148 053983E2 		add	r3, r3, #81920
 1908 014c 143083E2 		add	r3, r3, #20
 1909 0150 0320A0E3 		mov	r2, #3
 1910 0154 002083E5 		str	r2, [r3, #0]
  64:../Modules/pwm.c **** 
  65:../Modules/pwm.c **** 	//setDutyCycle(2, 1000);
  66:../Modules/pwm.c **** 	//setDutyCycle(4, 75);
  67:../Modules/pwm.c **** 	//setDutyCycle(5, 75);
  68:../Modules/pwm.c **** 
  69:../Modules/pwm.c **** 	PWMMCR = 0x0000003;  // reset on Match 0
 1911              		.loc 1 69 0
 1912 0158 0E32A0E3 		mov	r3, #-536870912
 1913 015c 053983E2 		add	r3, r3, #81920
 1914 0160 143083E2 		add	r3, r3, #20
 1915 0164 0320A0E3 		mov	r2, #3
 1916 0168 002083E5 		str	r2, [r3, #0]
  70:../Modules/pwm.c **** }
 1917              		.loc 1 70 0
 1918 016c 00D08BE2 		add	sp, fp, #0
 1919 0170 0008BDE8 		ldmfd	sp!, {fp}
 1920 0174 1EFF2FE1 		bx	lr
 1921              		.cfi_endproc
 1922              	.LFE0:
 1924              		.align	2
 1925              		.global	setDutyCycle
 1927              	setDutyCycle:
 1928              	.LFB1:
  71:../Modules/pwm.c **** 
  72:../Modules/pwm.c **** void setDutyCycle(unsigned int pwmchannel, unsigned int dutyccycle){
 1929              		.loc 1 72 0
 1930              		.cfi_startproc
 1931              		@ Function supports interworking.
 1932              		@ args = 0, pretend = 0, frame = 8
 1933              		@ frame_needed = 1, uses_anonymous_args = 0
 1934              		@ link register save eliminated.
 1935 0178 04B02DE5 		str	fp, [sp, #-4]!
 1936              	.LCFI2:
 1937              		.cfi_def_cfa_offset 4
 1938 017c 00B08DE2 		add	fp, sp, #0
 1939              		.cfi_offset 11, -4
 1940              	.LCFI3:
 1941              		.cfi_def_cfa_register 11
 1942 0180 0CD04DE2 		sub	sp, sp, #12
 1943 0184 08000BE5 		str	r0, [fp, #-8]
 1944 0188 0C100BE5 		str	r1, [fp, #-12]
  73:../Modules/pwm.c **** 	if(pwmchannel == 1){PWMMR1 = (dutyccycle  * CALCPWM)/1023;}
 1945              		.loc 1 73 0
 1946 018c 08301BE5 		ldr	r3, [fp, #-8]
 1947 0190 010053E3 		cmp	r3, #1
 1948 0194 1800001A 		bne	.L3
 1949              		.loc 1 73 0 is_stmt 0 discriminator 1
 1950 0198 0E22A0E3 		mov	r2, #-536870912
 1951 019c 052982E2 		add	r2, r2, #81920
 1952 01a0 1C2082E2 		add	r2, r2, #28
 1953 01a4 0C101BE5 		ldr	r1, [fp, #-12]
 1954 01a8 0130A0E1 		mov	r3, r1
 1955 01ac 8332A0E1 		mov	r3, r3, asl #5
 1956 01b0 033061E0 		rsb	r3, r1, r3
 1957 01b4 0331A0E1 		mov	r3, r3, asl #2
 1958 01b8 013083E0 		add	r3, r3, r1
 1959 01bc 0311A0E1 		mov	r1, r3, asl #2
 1960 01c0 013083E0 		add	r3, r3, r1
 1961 01c4 0312A0E1 		mov	r1, r3, asl #4
 1962 01c8 011063E0 		rsb	r1, r3, r1
 1963 01cc 8133A0E1 		mov	r3, r1, asl #7
 1964 01d0 0310A0E1 		mov	r1, r3
 1965 01d4 0135A0E3 		mov	r3, #4194304
 1966 01d8 013A83E2 		add	r3, r3, #4096
 1967 01dc 053083E2 		add	r3, r3, #5
 1968 01e0 910383E0 		umull	r0, r3, r1, r3
 1969 01e4 011063E0 		rsb	r1, r3, r1
 1970 01e8 A110A0E1 		mov	r1, r1, lsr #1
 1971 01ec 013083E0 		add	r3, r3, r1
 1972 01f0 A334A0E1 		mov	r3, r3, lsr #9
 1973 01f4 003082E5 		str	r3, [r2, #0]
 1974 01f8 8A0000EA 		b	.L2
 1975              	.L3:
  74:../Modules/pwm.c **** 	else if(pwmchannel == 2){PWMMR2 = dutyccycle * CALCPWM/1023;}
 1976              		.loc 1 74 0 is_stmt 1
 1977 01fc 08301BE5 		ldr	r3, [fp, #-8]
 1978 0200 020053E3 		cmp	r3, #2
 1979 0204 1800001A 		bne	.L5
 1980              		.loc 1 74 0 is_stmt 0 discriminator 1
 1981 0208 0E22A0E3 		mov	r2, #-536870912
 1982 020c 052982E2 		add	r2, r2, #81920
 1983 0210 202082E2 		add	r2, r2, #32
 1984 0214 0C101BE5 		ldr	r1, [fp, #-12]
 1985 0218 0130A0E1 		mov	r3, r1
 1986 021c 8332A0E1 		mov	r3, r3, asl #5
 1987 0220 033061E0 		rsb	r3, r1, r3
 1988 0224 0331A0E1 		mov	r3, r3, asl #2
 1989 0228 013083E0 		add	r3, r3, r1
 1990 022c 0311A0E1 		mov	r1, r3, asl #2
 1991 0230 013083E0 		add	r3, r3, r1
 1992 0234 0312A0E1 		mov	r1, r3, asl #4
 1993 0238 011063E0 		rsb	r1, r3, r1
 1994 023c 8133A0E1 		mov	r3, r1, asl #7
 1995 0240 0310A0E1 		mov	r1, r3
 1996 0244 0135A0E3 		mov	r3, #4194304
 1997 0248 013A83E2 		add	r3, r3, #4096
 1998 024c 053083E2 		add	r3, r3, #5
 1999 0250 910383E0 		umull	r0, r3, r1, r3
 2000 0254 011063E0 		rsb	r1, r3, r1
 2001 0258 A110A0E1 		mov	r1, r1, lsr #1
 2002 025c 013083E0 		add	r3, r3, r1
 2003 0260 A334A0E1 		mov	r3, r3, lsr #9
 2004 0264 003082E5 		str	r3, [r2, #0]
 2005 0268 6E0000EA 		b	.L2
 2006              	.L5:
  75:../Modules/pwm.c **** 	else if(pwmchannel == 3){PWMMR3 = (dutyccycle  * CALCPWM)/1023;}
 2007              		.loc 1 75 0 is_stmt 1
 2008 026c 08301BE5 		ldr	r3, [fp, #-8]
 2009 0270 030053E3 		cmp	r3, #3
 2010 0274 1800001A 		bne	.L6
 2011              		.loc 1 75 0 is_stmt 0 discriminator 1
 2012 0278 0E22A0E3 		mov	r2, #-536870912
 2013 027c 052982E2 		add	r2, r2, #81920
 2014 0280 242082E2 		add	r2, r2, #36
 2015 0284 0C101BE5 		ldr	r1, [fp, #-12]
 2016 0288 0130A0E1 		mov	r3, r1
 2017 028c 8332A0E1 		mov	r3, r3, asl #5
 2018 0290 033061E0 		rsb	r3, r1, r3
 2019 0294 0331A0E1 		mov	r3, r3, asl #2
 2020 0298 013083E0 		add	r3, r3, r1
 2021 029c 0311A0E1 		mov	r1, r3, asl #2
 2022 02a0 013083E0 		add	r3, r3, r1
 2023 02a4 0312A0E1 		mov	r1, r3, asl #4
 2024 02a8 011063E0 		rsb	r1, r3, r1
 2025 02ac 8133A0E1 		mov	r3, r1, asl #7
 2026 02b0 0310A0E1 		mov	r1, r3
 2027 02b4 0135A0E3 		mov	r3, #4194304
 2028 02b8 013A83E2 		add	r3, r3, #4096
 2029 02bc 053083E2 		add	r3, r3, #5
 2030 02c0 910383E0 		umull	r0, r3, r1, r3
 2031 02c4 011063E0 		rsb	r1, r3, r1
 2032 02c8 A110A0E1 		mov	r1, r1, lsr #1
 2033 02cc 013083E0 		add	r3, r3, r1
 2034 02d0 A334A0E1 		mov	r3, r3, lsr #9
 2035 02d4 003082E5 		str	r3, [r2, #0]
 2036 02d8 520000EA 		b	.L2
 2037              	.L6:
  76:../Modules/pwm.c **** 	else if(pwmchannel == 4){PWMMR4 = (dutyccycle  * CALCPWM)/1023;}
 2038              		.loc 1 76 0 is_stmt 1
 2039 02dc 08301BE5 		ldr	r3, [fp, #-8]
 2040 02e0 040053E3 		cmp	r3, #4
 2041 02e4 1800001A 		bne	.L7
 2042              		.loc 1 76 0 is_stmt 0 discriminator 1
 2043 02e8 0E22A0E3 		mov	r2, #-536870912
 2044 02ec 052982E2 		add	r2, r2, #81920
 2045 02f0 402082E2 		add	r2, r2, #64
 2046 02f4 0C101BE5 		ldr	r1, [fp, #-12]
 2047 02f8 0130A0E1 		mov	r3, r1
 2048 02fc 8332A0E1 		mov	r3, r3, asl #5
 2049 0300 033061E0 		rsb	r3, r1, r3
 2050 0304 0331A0E1 		mov	r3, r3, asl #2
 2051 0308 013083E0 		add	r3, r3, r1
 2052 030c 0311A0E1 		mov	r1, r3, asl #2
 2053 0310 013083E0 		add	r3, r3, r1
 2054 0314 0312A0E1 		mov	r1, r3, asl #4
 2055 0318 011063E0 		rsb	r1, r3, r1
 2056 031c 8133A0E1 		mov	r3, r1, asl #7
 2057 0320 0310A0E1 		mov	r1, r3
 2058 0324 0135A0E3 		mov	r3, #4194304
 2059 0328 013A83E2 		add	r3, r3, #4096
 2060 032c 053083E2 		add	r3, r3, #5
 2061 0330 910383E0 		umull	r0, r3, r1, r3
 2062 0334 011063E0 		rsb	r1, r3, r1
 2063 0338 A110A0E1 		mov	r1, r1, lsr #1
 2064 033c 013083E0 		add	r3, r3, r1
 2065 0340 A334A0E1 		mov	r3, r3, lsr #9
 2066 0344 003082E5 		str	r3, [r2, #0]
 2067 0348 360000EA 		b	.L2
 2068              	.L7:
  77:../Modules/pwm.c **** 	else if(pwmchannel == 5){PWMMR5 = (dutyccycle  * CALCPWM)/1023;}
 2069              		.loc 1 77 0 is_stmt 1
 2070 034c 08301BE5 		ldr	r3, [fp, #-8]
 2071 0350 050053E3 		cmp	r3, #5
 2072 0354 1800001A 		bne	.L8
 2073              		.loc 1 77 0 is_stmt 0 discriminator 1
 2074 0358 0E22A0E3 		mov	r2, #-536870912
 2075 035c 052982E2 		add	r2, r2, #81920
 2076 0360 442082E2 		add	r2, r2, #68
 2077 0364 0C101BE5 		ldr	r1, [fp, #-12]
 2078 0368 0130A0E1 		mov	r3, r1
 2079 036c 8332A0E1 		mov	r3, r3, asl #5
 2080 0370 033061E0 		rsb	r3, r1, r3
 2081 0374 0331A0E1 		mov	r3, r3, asl #2
 2082 0378 013083E0 		add	r3, r3, r1
 2083 037c 0311A0E1 		mov	r1, r3, asl #2
 2084 0380 013083E0 		add	r3, r3, r1
 2085 0384 0312A0E1 		mov	r1, r3, asl #4
 2086 0388 011063E0 		rsb	r1, r3, r1
 2087 038c 8133A0E1 		mov	r3, r1, asl #7
 2088 0390 0310A0E1 		mov	r1, r3
 2089 0394 0135A0E3 		mov	r3, #4194304
 2090 0398 013A83E2 		add	r3, r3, #4096
 2091 039c 053083E2 		add	r3, r3, #5
 2092 03a0 910383E0 		umull	r0, r3, r1, r3
 2093 03a4 011063E0 		rsb	r1, r3, r1
 2094 03a8 A110A0E1 		mov	r1, r1, lsr #1
 2095 03ac 013083E0 		add	r3, r3, r1
 2096 03b0 A334A0E1 		mov	r3, r3, lsr #9
 2097 03b4 003082E5 		str	r3, [r2, #0]
 2098 03b8 1A0000EA 		b	.L2
 2099              	.L8:
  78:../Modules/pwm.c **** 	else if(pwmchannel == 6){PWMMR6 = (dutyccycle  * CALCPWM)/1023;}
 2100              		.loc 1 78 0 is_stmt 1
 2101 03bc 08301BE5 		ldr	r3, [fp, #-8]
 2102 03c0 060053E3 		cmp	r3, #6
 2103 03c4 1700001A 		bne	.L2
 2104              		.loc 1 78 0 is_stmt 0 discriminator 1
 2105 03c8 0E22A0E3 		mov	r2, #-536870912
 2106 03cc 052982E2 		add	r2, r2, #81920
 2107 03d0 482082E2 		add	r2, r2, #72
 2108 03d4 0C101BE5 		ldr	r1, [fp, #-12]
 2109 03d8 0130A0E1 		mov	r3, r1
 2110 03dc 8332A0E1 		mov	r3, r3, asl #5
 2111 03e0 033061E0 		rsb	r3, r1, r3
 2112 03e4 0331A0E1 		mov	r3, r3, asl #2
 2113 03e8 013083E0 		add	r3, r3, r1
 2114 03ec 0311A0E1 		mov	r1, r3, asl #2
 2115 03f0 013083E0 		add	r3, r3, r1
 2116 03f4 0312A0E1 		mov	r1, r3, asl #4
 2117 03f8 011063E0 		rsb	r1, r3, r1
 2118 03fc 8133A0E1 		mov	r3, r1, asl #7
 2119 0400 0310A0E1 		mov	r1, r3
 2120 0404 0135A0E3 		mov	r3, #4194304
 2121 0408 013A83E2 		add	r3, r3, #4096
 2122 040c 053083E2 		add	r3, r3, #5
 2123 0410 910383E0 		umull	r0, r3, r1, r3
 2124 0414 011063E0 		rsb	r1, r3, r1
 2125 0418 A110A0E1 		mov	r1, r1, lsr #1
 2126 041c 013083E0 		add	r3, r3, r1
 2127 0420 A334A0E1 		mov	r3, r3, lsr #9
 2128 0424 003082E5 		str	r3, [r2, #0]
 2129              	.L2:
  79:../Modules/pwm.c **** }
 2130              		.loc 1 79 0 is_stmt 1
 2131 0428 00D08BE2 		add	sp, fp, #0
 2132 042c 0008BDE8 		ldmfd	sp!, {fp}
 2133 0430 1EFF2FE1 		bx	lr
 2134              		.cfi_endproc
 2135              	.LFE1:
 2137              		.global	__aeabi_uidiv
 2138              		.align	2
 2139              		.global	setDOF1_PWM
 2141              	setDOF1_PWM:
 2142              	.LFB2:
  80:../Modules/pwm.c **** 
  81:../Modules/pwm.c **** /*void setDutyCycle(unsigned int pwmchannel, unsigned int dutyccycle){
  82:../Modules/pwm.c **** 	if(pwmchannel == 1){PWMMR1 = (600000/PWMFREQUENCY) * dutyccycle;}
  83:../Modules/pwm.c **** 	else if(pwmchannel == 2){PWMMR2 = (600000/PWMFREQUENCY) * dutyccycle;}
  84:../Modules/pwm.c **** 	else if(pwmchannel == 3){PWMMR3 = (600000/PWMFREQUENCY) * dutyccycle;}
  85:../Modules/pwm.c **** 	else if(pwmchannel == 4){PWMMR4 = (600000/PWMFREQUENCY) * dutyccycle;}
  86:../Modules/pwm.c **** 	else if(pwmchannel == 5){PWMMR5 = (600000/PWMFREQUENCY) * dutyccycle;}
  87:../Modules/pwm.c **** 	else if(pwmchannel == 6){PWMMR6 = (600000/PWMFREQUENCY) * dutyccycle;}
  88:../Modules/pwm.c **** }*/
  89:../Modules/pwm.c **** 
  90:../Modules/pwm.c **** void setDOF1_PWM(unsigned int frequency)
  91:../Modules/pwm.c **** {
 2143              		.loc 1 91 0
 2144              		.cfi_startproc
 2145              		@ Function supports interworking.
 2146              		@ args = 0, pretend = 0, frame = 8
 2147              		@ frame_needed = 1, uses_anonymous_args = 0
 2148 0434 10482DE9 		stmfd	sp!, {r4, fp, lr}
 2149              	.LCFI4:
 2150              		.cfi_def_cfa_offset 12
 2151 0438 08B08DE2 		add	fp, sp, #8
 2152              		.cfi_offset 14, -4
 2153              		.cfi_offset 11, -8
 2154              		.cfi_offset 4, -12
 2155              	.LCFI5:
 2156              		.cfi_def_cfa 11, 4
 2157 043c 0CD04DE2 		sub	sp, sp, #12
 2158 0440 10000BE5 		str	r0, [fp, #-16]
  92:../Modules/pwm.c **** 	//Configuration for PWM 2 operation
  93:../Modules/pwm.c **** 	PINSEL0 &= ~(3 << 14);
 2159              		.loc 1 93 0
 2160 0444 0E32A0E3 		mov	r3, #-536870912
 2161 0448 0B3983E2 		add	r3, r3, #180224
 2162 044c 0E22A0E3 		mov	r2, #-536870912
 2163 0450 0B2982E2 		add	r2, r2, #180224
 2164 0454 002092E5 		ldr	r2, [r2, #0]
 2165 0458 0329C2E3 		bic	r2, r2, #49152
 2166 045c 002083E5 		str	r2, [r3, #0]
  94:../Modules/pwm.c **** 	PINSEL0 |= (1 << 15);;
 2167              		.loc 1 94 0
 2168 0460 0E32A0E3 		mov	r3, #-536870912
 2169 0464 0B3983E2 		add	r3, r3, #180224
 2170 0468 0E22A0E3 		mov	r2, #-536870912
 2171 046c 0B2982E2 		add	r2, r2, #180224
 2172 0470 002092E5 		ldr	r2, [r2, #0]
 2173 0474 022982E3 		orr	r2, r2, #32768
 2174 0478 002083E5 		str	r2, [r3, #0]
  95:../Modules/pwm.c **** 	PWMTCR = 0x02;
 2175              		.loc 1 95 0
 2176 047c 4E32A0E3 		mov	r3, #-536870908
 2177 0480 053983E2 		add	r3, r3, #81920
 2178 0484 0220A0E3 		mov	r2, #2
 2179 0488 002083E5 		str	r2, [r3, #0]
  96:../Modules/pwm.c **** 	PWMMR0 = 60000000/frequency;
 2180              		.loc 1 96 0
 2181 048c 0E42A0E3 		mov	r4, #-536870912
 2182 0490 054984E2 		add	r4, r4, #81920
 2183 0494 184084E2 		add	r4, r4, #24
 2184 0498 E507A0E3 		mov	r0, #60030976
 2185 049c 790C40E2 		sub	r0, r0, #30976
 2186 04a0 10101BE5 		ldr	r1, [fp, #-16]
 2187 04a4 FEFFFFEB 		bl	__aeabi_uidiv
 2188 04a8 0030A0E1 		mov	r3, r0
 2189 04ac 003084E5 		str	r3, [r4, #0]
  97:../Modules/pwm.c **** 	PWMPR = 0;
 2190              		.loc 1 97 0
 2191 04b0 CE32A0E3 		mov	r3, #-536870900
 2192 04b4 053983E2 		add	r3, r3, #81920
 2193 04b8 0020A0E3 		mov	r2, #0
 2194 04bc 002083E5 		str	r2, [r3, #0]
  98:../Modules/pwm.c **** 	PWMPCR &= ~((1 << 2) | (1 << 4) | (1 << 5));
 2195              		.loc 1 98 0
 2196 04c0 0E32A0E3 		mov	r3, #-536870912
 2197 04c4 053983E2 		add	r3, r3, #81920
 2198 04c8 4C3083E2 		add	r3, r3, #76
 2199 04cc 0E22A0E3 		mov	r2, #-536870912
 2200 04d0 052982E2 		add	r2, r2, #81920
 2201 04d4 4C2082E2 		add	r2, r2, #76
 2202 04d8 002092E5 		ldr	r2, [r2, #0]
 2203 04dc 3420C2E3 		bic	r2, r2, #52
 2204 04e0 002083E5 		str	r2, [r3, #0]
  99:../Modules/pwm.c **** 	PWMPCR |= ((1 << 13) | (1 << 12) | (1 << 10)); // Sets PWM 2,4,5 as single edge output
 2205              		.loc 1 99 0
 2206 04e4 0E32A0E3 		mov	r3, #-536870912
 2207 04e8 053983E2 		add	r3, r3, #81920
 2208 04ec 4C3083E2 		add	r3, r3, #76
 2209 04f0 0E22A0E3 		mov	r2, #-536870912
 2210 04f4 052982E2 		add	r2, r2, #81920
 2211 04f8 4C2082E2 		add	r2, r2, #76
 2212 04fc 002092E5 		ldr	r2, [r2, #0]
 2213 0500 0D2B82E3 		orr	r2, r2, #13312
 2214 0504 002083E5 		str	r2, [r3, #0]
 100:../Modules/pwm.c **** 	PWMTCR = 00001001;
 2215              		.loc 1 100 0
 2216 0508 4E32A0E3 		mov	r3, #-536870908
 2217 050c 053983E2 		add	r3, r3, #81920
 2218 0510 022CA0E3 		mov	r2, #512
 2219 0514 012082E2 		add	r2, r2, #1
 2220 0518 002083E5 		str	r2, [r3, #0]
 101:../Modules/pwm.c **** 	PWMMCR = 0x0000003;
 2221              		.loc 1 101 0
 2222 051c 0E32A0E3 		mov	r3, #-536870912
 2223 0520 053983E2 		add	r3, r3, #81920
 2224 0524 143083E2 		add	r3, r3, #20
 2225 0528 0320A0E3 		mov	r2, #3
 2226 052c 002083E5 		str	r2, [r3, #0]
 102:../Modules/pwm.c **** }
 2227              		.loc 1 102 0
 2228 0530 08D04BE2 		sub	sp, fp, #8
 2229 0534 1048BDE8 		ldmfd	sp!, {r4, fp, lr}
 2230 0538 1EFF2FE1 		bx	lr
 2231              		.cfi_endproc
 2232              	.LFE2:
 2234              		.align	2
 2235              		.global	setDOF1_DutyCycle
 2237              	setDOF1_DutyCycle:
 2238              	.LFB3:
 103:../Modules/pwm.c **** 
 104:../Modules/pwm.c **** void setDOF1_DutyCycle(unsigned int dutycycle){
 2239              		.loc 1 104 0
 2240              		.cfi_startproc
 2241              		@ Function supports interworking.
 2242              		@ args = 0, pretend = 0, frame = 8
 2243              		@ frame_needed = 1, uses_anonymous_args = 0
 2244              		@ link register save eliminated.
 2245 053c 04B02DE5 		str	fp, [sp, #-4]!
 2246              	.LCFI6:
 2247              		.cfi_def_cfa_offset 4
 2248 0540 00B08DE2 		add	fp, sp, #0
 2249              		.cfi_offset 11, -4
 2250              	.LCFI7:
 2251              		.cfi_def_cfa_register 11
 2252 0544 0CD04DE2 		sub	sp, sp, #12
 2253 0548 08000BE5 		str	r0, [fp, #-8]
 105:../Modules/pwm.c **** 	//Set PWM Duty Cycle for PWM 2
 106:../Modules/pwm.c **** 	PWMMR2 = 600 * dutycycle;
 2254              		.loc 1 106 0
 2255 054c 0E22A0E3 		mov	r2, #-536870912
 2256 0550 052982E2 		add	r2, r2, #81920
 2257 0554 202082E2 		add	r2, r2, #32
 2258 0558 08101BE5 		ldr	r1, [fp, #-8]
 2259 055c 0130A0E1 		mov	r3, r1
 2260 0560 0331A0E1 		mov	r3, r3, asl #2
 2261 0564 013083E0 		add	r3, r3, r1
 2262 0568 0312A0E1 		mov	r1, r3, asl #4
 2263 056c 011063E0 		rsb	r1, r3, r1
 2264 0570 8131A0E1 		mov	r3, r1, asl #3
 2265 0574 003082E5 		str	r3, [r2, #0]
 107:../Modules/pwm.c **** }
 2266              		.loc 1 107 0
 2267 0578 00D08BE2 		add	sp, fp, #0
 2268 057c 0008BDE8 		ldmfd	sp!, {fp}
 2269 0580 1EFF2FE1 		bx	lr
 2270              		.cfi_endproc
 2271              	.LFE3:
 2273              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 pwm.c
C:\Users\Daniel\AppData\Local\Temp\ccojuLvW.s:1796   .text:00000000 $a
C:\Users\Daniel\AppData\Local\Temp\ccojuLvW.s:1799   .text:00000000 PWMInit
C:\Users\Daniel\AppData\Local\Temp\ccojuLvW.s:1927   .text:00000178 setDutyCycle
C:\Users\Daniel\AppData\Local\Temp\ccojuLvW.s:2141   .text:00000434 setDOF1_PWM
C:\Users\Daniel\AppData\Local\Temp\ccojuLvW.s:2237   .text:0000053c setDOF1_DutyCycle
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
